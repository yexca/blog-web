<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>软件工程 on yexca'Blog</title><link>https://blog.yexca.net/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</link><description>Recent content in 软件工程 on yexca'Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>yexca</copyright><lastBuildDate>Tue, 16 Jan 2024 08:10:10 +0800</lastBuildDate><atom:link href="https://blog.yexca.net/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/feed.xml" rel="self" type="application/rss+xml"/><item><title>结构化开发</title><link>https://blog.yexca.net/archives/145/</link><pubDate>Tue, 16 Jan 2024 08:10:10 +0800</pubDate><guid>https://blog.yexca.net/archives/145/</guid><description>&lt;h2 id="系统设计的基本原理">系统设计的基本原理
&lt;/h2>&lt;p>抽象、模块化、信息隐蔽、模块独立&lt;/p>
&lt;h3 id="模块化">模块化
&lt;/h3>&lt;p>在软件的体系结构中，模块是可组合、分解和更换的单元&lt;/p>
&lt;p>模块化是指将一个待开发的软件分解成若干个小的简单部分，即模块。每个模块可独立地开发、测试，最后组装成完整的程序。这是一种复杂问题 &amp;ldquo;分而治之&amp;rdquo; 的原则。模块化的目的是使程序的结构清晰，容易阅读、理解、测试和修改&lt;/p></description></item><item><title>设计模式 Index</title><link>https://blog.yexca.net/archives/140/</link><pubDate>Wed, 27 Dec 2023 16:14:15 +0800</pubDate><guid>https://blog.yexca.net/archives/140/</guid><description>&lt;p>简单介绍设计模式&lt;/p>
&lt;ul>
&lt;li>
&lt;a class="link" href="https://blog.yexca.net/archives/108"
>
设计模式 引
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;p>具体的设计模式&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">&lt;/th>
&lt;th style="text-align: center">创建型&lt;/th>
&lt;th style="text-align: center">结构型&lt;/th>
&lt;th style="text-align: center">行为型&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">类&lt;/td>
&lt;td style="text-align: center">工厂方法模式&lt;/td>
&lt;td style="text-align: center">适配器模式 (类)&lt;/td>
&lt;td style="text-align: center">
&lt;a class="link" href="https://blog.yexca.net/archives/126"
>
解释器模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/138"
>
模板方法模式
&lt;/a>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">对象&lt;/td>
&lt;td style="text-align: center">抽象工厂模式&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/112"
>
生成器模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/113"
>
原型模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/115"
>
单例模式
&lt;/a>
&lt;/td>
&lt;td style="text-align: center">适配器模式 (对象)&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/118"
>
桥接模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/119"
>
组合模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/120"
>
装饰器模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/121"
>
外观模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/122"
>
享元模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/123"
>
代理模式
&lt;/a>
&lt;/td>
&lt;td style="text-align: center">
&lt;a class="link" href="https://blog.yexca.net/archives/124"
>
责任链模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/125"
>
命令模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/127"
>
迭代器模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/128"
>
中介者模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/132"
>
备忘录模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/134"
>
观察者模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/136"
>
状态模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/137"
>
策略模式
&lt;/a>
&lt;br />
&lt;a class="link" href="https://blog.yexca.net/archives/139"
>
访问者模式
&lt;/a>
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>其中&lt;/p></description></item><item><title>设计模式 引</title><link>https://blog.yexca.net/archives/108/</link><pubDate>Wed, 17 May 2023 22:50:20 +0800</pubDate><guid>https://blog.yexca.net/archives/108/</guid><description>&lt;p>&amp;ldquo;每一个设计模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动&amp;rdquo;。设计模式的核心在于提供了相关问题的解决方案，使得人们可以简单方便地复用成功的设计和体系结构&lt;/p></description></item><item><title>UML 中的图</title><link>https://blog.yexca.net/archives/104/</link><pubDate>Thu, 13 Apr 2023 20:02:00 +0800</pubDate><guid>https://blog.yexca.net/archives/104/</guid><description>&lt;p>图 (Diagram) 是一组元素的图形表示，大多数情况下把图画成顶点 (代表事物) 和弧 (代表关系) 的连通图。为了对系统进行可视化，可以从不同的角度画图，这样图是对系统的投影&lt;/p></description></item><item><title>UML</title><link>https://blog.yexca.net/archives/103/</link><pubDate>Tue, 11 Apr 2023 08:01:00 +0800</pubDate><guid>https://blog.yexca.net/archives/103/</guid><description>&lt;p>面向对象分析强调的是对一个系统中对象的特征和行为的定义。目前，国际上已经出现了多种面向对象的方法。业界普遍接受的为 UML (Unified Modeling Language, 统一建模语言)&lt;/p>
&lt;p>统一建模语言是面向对象软件的标准化建模语言。由于其简单、统一，又能够表达软件设计中的动态和静态信息，目前已经成为可视化建模语言事实上的工业标准&lt;/p></description></item><item><title>软件工程-软件质量与软件工具</title><link>https://blog.yexca.net/archives/101/</link><pubDate>Mon, 03 Apr 2023 19:59:00 +0800</pubDate><guid>https://blog.yexca.net/archives/101/</guid><description>&lt;p>软件工程系列文章六&lt;/p>
&lt;p>软件质量是指反映软件系统或软件产品满足规定或隐含需求的能力的特征和特性全体&lt;/p>
&lt;p>软件质量管理是指对软件开发过程进行独立的检查活动，由质量保证、质量规划和质量控制 3 个主要活动构成&lt;/p></description></item><item><title>软件工程-软件项目管理</title><link>https://blog.yexca.net/archives/100/</link><pubDate>Sun, 02 Apr 2023 06:58:00 +0800</pubDate><guid>https://blog.yexca.net/archives/100/</guid><description>&lt;p>软件工程系列文章五&lt;/p>
&lt;p>软件项目的成功率非常低的原因可能就是项目管理能力太弱。由于软件本身的特殊性及复杂性，将项目管理思想引入软件工程领域，就形成了软件项目管理&lt;/p></description></item><item><title>软件工程-系统维护概述</title><link>https://blog.yexca.net/archives/99/</link><pubDate>Fri, 31 Mar 2023 07:57:00 +0800</pubDate><guid>https://blog.yexca.net/archives/99/</guid><description>&lt;p>软件工程系列文章四&lt;/p>
&lt;p>软件维护是软件生命周期的最后一个阶段，处于系统投入生产性运行之后的时期中，因此不属于系统开发过程。软件维护是在软件已经交付使用之后为了改正错误或满足新的需求而修改软件的过程，即软件在交付使用后对软件所做的一切改动&lt;/p></description></item><item><title>软件工程-系统测试</title><link>https://blog.yexca.net/archives/98/</link><pubDate>Wed, 29 Mar 2023 19:56:57 +0800</pubDate><guid>https://blog.yexca.net/archives/98/</guid><description>&lt;p>软件工程系列文章三&lt;/p>
&lt;h2 id="系统测试的意义目的及原则">系统测试的意义、目的及原则
&lt;/h2>&lt;p>系统测试是为了发现错误而执行程序的过程，成功的测试是发现了至今尚未发现的错误的测试&lt;/p>
&lt;p>测试的目的就是希望能以最少的人力和时间发现潜在的各种错误和缺陷。用户应根据开发各阶段的需求、设计等文档或程序的内部结构精心设计测试用例，并利用这些实例来运行程序，以便发现错误的过程&lt;/p></description></item><item><title>软件工程-需求分析与系统设计</title><link>https://blog.yexca.net/archives/97/</link><pubDate>Wed, 29 Mar 2023 17:04:45 +0800</pubDate><guid>https://blog.yexca.net/archives/97/</guid><description>&lt;p>软件工程系列文章二&lt;/p>
&lt;h2 id="软件生存周期">软件生存周期
&lt;/h2>&lt;ol>
&lt;li>可行性分析与项目开发计划&lt;/li>
&lt;li>需求分析&lt;/li>
&lt;li>概要设计&lt;/li>
&lt;li>详细设计&lt;/li>
&lt;li>编码&lt;/li>
&lt;li>测试&lt;/li>
&lt;li>维护&lt;/li>
&lt;/ol>
&lt;h2 id="软件需求">软件需求
&lt;/h2>&lt;p>在进行需求获取之前，首先要明确需要获取什么，也就是需求包含哪些内容。软件需求是指用户对目标软件系统在功能、行为、性能、设计约束等方面的期望&lt;/p></description></item><item><title>软件工程-软件过程与软件过程模型</title><link>https://blog.yexca.net/archives/96/</link><pubDate>Tue, 28 Mar 2023 15:45:47 +0800</pubDate><guid>https://blog.yexca.net/archives/96/</guid><description>&lt;p>软件工程系列文章一&lt;/p>
&lt;h2 id="软件过程">软件过程
&lt;/h2>&lt;p>软件开发的中所遵循的线路图称为 &amp;ldquo;软件过程&amp;rdquo;&lt;/p>
&lt;h3 id="能力成熟度模型-cmm">能力成熟度模型 (CMM)
&lt;/h3>&lt;p>CMM 将软件过程改进分为以下 5 个成熟度级别&lt;/p>
&lt;ol>
&lt;li>初始级 (Initial)&lt;/li>
&lt;/ol>
&lt;p>​ 软件的特点是杂乱无章，有时甚至很混乱，几乎没有明确定义的步骤，项目的完成完全依赖个人的努力和英雄式核心人物的作用&lt;/p></description></item><item><title>面向对象基础</title><link>https://blog.yexca.net/archives/93/</link><pubDate>Sat, 25 Feb 2023 19:34:30 +0800</pubDate><guid>https://blog.yexca.net/archives/93/</guid><description>&lt;p>面向对象 (Object-Oriented, OO) 是一种非常实用的系统化软件开发方法&lt;/p>
&lt;h2 id="面向过程和面向对象">面向过程和面向对象
&lt;/h2>&lt;p>以一个问题引入：把大象装进冰箱，需要几步？&lt;/p>
&lt;p>一般先打开冰箱，然后把大象装进冰箱，最后关上冰箱&lt;/p>
&lt;h3 id="面向过程">面向过程：
&lt;/h3>&lt;p>关心我该怎么做？一步步去实现这个功能&lt;/p></description></item></channel></rss>