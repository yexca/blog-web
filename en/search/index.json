[{"content":" This article was partially machine translated\nNot everyone who swipes cards is chasing cashback, and not everyone who designs systems is a programmer. Some swipe cards like designers, and design systems like they live life.\n1. Introduction: What is a Card Enthusiast? Let’s start with something I once saw online—the seven favorite hobbies of card enthusiasts:\nNote: “Mainland China” here refers to regions where capital inflow and outflow are restricted.\nFinding ways to spend foreign currency in China Finding ways to spend RMB abroad Finding ways to move RMB out of the country Finding ways to bring foreign currency in Applying for cards that are useless in China Applying for cards that are even more useless abroad Trying to move around money that doesn’t even reach the length of a typical PIN code, across a bunch of nearly useless cards Note: In mainland China, bank PINs are usually 6 digits. This is a self-deprecating joke meaning “my balance doesn’t even reach 6 digits, but I’m still shuffling it like it matters.” May not apply elsewhere.\nIt may sound like a financial game—applying for cards, chasing cashback, reducing fees, optimizing exchanges\u0026hellip; Seems like a bunch of petty tricks.\nBut for true card enthusiasts:\nIt’s not about saving a few bucks—it\u0026rsquo;s about designing an optimal, multi-channel, multi-constraint capital flow system.\nThey’re not milking the system. They’re exploring the architecture of reality, optimizing the structure of everyday life.\n2. What Does a System Architect Actually Do? To become a certified system architect, you need to learn all kinds of jargon—modular decoupling, performance optimization, API specification, and more. But beyond the terms, the real job is simple:\nFaced with complex constraints, allocate resources, design routes, and connect systems to build something stable yet flexible.\nA system architect isn’t just writing beautiful code or drawing diagrams. Their main concern is: will the system work in real-world chaos? For example:\nHow should modules divide responsibilities? How should services interact? How can interfaces be defined for future expansion? How do we locate issues and isolate failures? How do we balance performance and cost under limited resources? Their role is part LEGO builder, part road engineer, part system patcher. Not given a perfect blueprint from the start, they piece things together step-by-step in a broken and messy world.\nIn short, they design systems that run steadily, adapt quickly, and are affordable to maintain. They don’t chase technical perfection—they chase what works. That’s the beauty of system architecture.\nI only learned these things for an exam, but through that process, I rediscovered my passion for card optimization.\n3. The “Architecture Problems” of Card Enthusiasts Card optimization isn’t just “saving a little money.” And system architecture isn’t just “high-end tech design.” Despite different contexts, they both tackle the same core challenge:\nNavigating constraints, managing costs, and designing optimal structures in an uncertain world.\nCard enthusiasts don’t just apply for cards—they design capital flows.\nSystem architects don’t just code—they design control and data flows.\nCard people ask: how do I reduce fees, avoid risk flags, and ensure smooth transactions?\nArchitects ask: how do I reduce failures, scale up, and maintain stability?\nI originally studied architecture for the test, but looking back—it’s the same thinking I used when optimizing my card flows.\nCard World Architecture World Core Logic Fees Latency / Performance Cost Management Channel Limits API Call Restrictions Protocol Compatibility Card Regulations Module Specifications Compliance FX Disparities Cross-platform Overhead Environment Adaptation Card Diversity Tech Stack Diversity Module Integration Bank Risk Controls Security Strategies Risk Management Flow Paths Data Routing Architectural Routing Card optimization isn’t exploiting loopholes—it’s designing capital flow architectures.\nThey aren’t “doing things.” They’re building structures: not just finding the best cashback card, but designing a path that moves funds with minimal cost and maximum efficiency.\nThey don’t just ask “can it be done,” but “is it elegant.”\nCard optimization is solving a constrained shortest-path problem, just like service topology design is about optimizing module coupling under SLA limits.\nThe difference between them? Just different application domains.\n4. System Practice Through Personal Exploration Others chase cashback. I’m studying the ecosystem.\nEvery card enthusiast’s path is unique. We each deal with different banks, currencies, and lifestyles.\nThe fun doesn’t lie in copying others—but in finding your own optimal flow through trial and error, grounded in real context.\nI started off just trying to save a little on fees. But after digging through endless documentation, I realized: every bank had its own transfer policies, time windows, restrictions. Some offered free morning transfers, others were fast but limited to specific currencies. Some would randomly block transfers. It felt like a fog-of-war map—I had to explore, unlock nodes, and build routes.\nAfter countless small tests, I built a working, cost-effective flow tailored to myself. I avoided high-fee routes, optimized timing, and even exploited currency fluctuations for marginal gains.\nSome goals seemed impossible at first—like sending funds to countries with little infrastructure. But I eventually figured out how: crypto deposits, direct virtual currency payments, fiat-to-stablecoin automation, specialized remittance apps bypassing banks\u0026hellip; I made the impossible possible.\nThis transition—from “unreachable” to “path unlocked”—felt exactly like rebuilding a network architecture.\nI wasn’t just transferring money. I was redefining the structure of value transmission.\nSounds complex? It’s really just a classic systems design problem:\nHow do systems communicate and transfer data? How do we handle format (currency) conversions? Which nodes are reliable? Which paths are low-latency and low-failure? How do we move a “data packet” (money) through protocols (remittance channels) to the destination? Can it feel seamless from the user’s (my) perspective? That’s architecture: not feature-building, but designing a coherent, maintainable, scalable system.\nEach card is a node; each interface is a protocol. Every iteration? A tiny architectural optimization.\nIt’s route planning + interface negotiation + user experience. Sounds familiar, architect?\nCard enthusiasts aren’t just saving money. They’re reconstructing the world’s financial logic and taking control.\n5. Architectural Literacy Forged Through Card Craft Through every route choice, failed experiment, cost balancing act, and risk-management adjustment, card enthusiasts are honing a kind of architectural mindset. No servers, no code—but plenty of real-world structure tuning and efficiency refinement. That process? It\u0026rsquo;s hands-on system design.\nAll these behaviors, over time, naturally evolve into core architectural instincts:\nCapability Real-World Manifestation Architectural Principle Rule Familiarity Mastering bank limits and terms Documentation Literacy Integration Coordinating multi-card workflows System Integration Thinking Cost Awareness Minimizing transaction fees Performance/Cost Tradeoff Modeling Mapping optimal card flow paths Structural Modeling Risk Management Multi-account, failover logic High Availability Design Aesthetic Sense Making money “move elegantly” Engineering Beauty In many ways, card enthusiasts are simulating what it means to think like a systems architect—using the real world as their playground.\n6. My Reflection Fees are the enemy. Channels are sacred. Paths are art.\nI didn’t become a card enthusiast because I love swiping cards—I became one because through each experiment, I found beauty in structure. We may not write code or run servers, but every money transfer, every optimized flow—it’s all a personal exercise in system design.\nFrom prepping for the architecture certification to building my daily financial routes, I’ve come to realize:\nWhat I enjoy isn’t just getting things done—it’s making the path elegant.\nWhat others see as petty tricks, I see as system aesthetics.\nWhat others call loophole hunters, I call life architects.\nCardcraft isn’t just about saving money—it’s a real-world sandbox to train your sense of system design: visualizing problems, iterating solutions, aligning logic with beauty.\nIt’s not a waste of time. It’s a tactile, tangible, deeply personal “practice space” for designing real-world systems.\nIt’s not about saving money. It’s about skill-building.\nIt’s not about invention. It’s about choosing the right structure.\nWhether it’s designing systems or optimizing card flows, the point isn’t how much you saved or how many lines you wrote—it’s how much better you understand how the world works.\nAnd I? I’m the kind of person who stands in front of an ATM for 10 minutes—just to calculate the optimal fee path. Maybe I don’t have a server to deploy, but I’m still architecting.\nConclusion: Life Is the Ultimate Architecture Every time we swipe a card, transfer money, evaluate a route, or make a combination decision—we\u0026rsquo;re engaging in an invisible act of system design.\nArchitecture isn\u0026rsquo;t just about servers and APIs. Sometimes, it\u0026rsquo;s hidden between wallets, bank cards, and payment methods.\nAt the end of the card optimization path, perhaps what we find is not a loophole hunter—\n—but a life architect in disguise.\nAppendix: My Capital Flow in Code This code isn’t meant to be executable—it’s a model of how I think about my real-world money flows. It’s how I express everyday logistics through architectural language.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // My cross-border capital flow (illustrative) func RouteCNYtoJPY(CNY float64) JPY float64 { HKD := BOCExchange(CNY, to=\u0026#34;HKD\u0026#34;) log.Printf(\u0026#34;Exchanged %.2f CNY to %.2f HKD\u0026#34;, CNY, HKD) Transfer(HKD, from=\u0026#34;BOC\u0026#34;, to=\u0026#34;BOCHK\u0026#34;, by=\u0026#34;pbservice\u0026#34;) log.Println(\u0026#34;Transferred via pbservice → BOCHK\u0026#34;) Transfer(HKD, from=\u0026#34;BOCHK\u0026#34;, to=\u0026#34;Wise\u0026#34;, by=\u0026#34;fpservice\u0026#34;) log.Println(\u0026#34;Transferred via fps → Wise\u0026#34;) JPY := WiseConvert(HKD, to=\u0026#34;JPY\u0026#34;) log.Printf(\u0026#34;Converted %.2f HKD to %.2f JPY via Wise\u0026#34;, HKD, JPY) Deposit(JPY, to=\u0026#34;Revolut\u0026#34;, with=\u0026#34;ApplePay\u0026#34;) return JPY } A code snippet built not for execution, but for expression—a symbolic blueprint connecting everyday money logic to architectural thinking.\nDisclaimer: This article is for entertainment and personal documentation purposes only. It is not intended as financial or legal advice. Please enjoy responsibly.\n","date":"2025-04-22T00:35:15+09:00","image":"https://github.com/yexca/picx-images-hosting/raw/master/2025/04-FromCardEnthusiastToArchitect/250422-EN.7snerqkrqj.webp","permalink":"https://blog.yexca.net/en/archives/245/","title":"From Card Enthusiast to Architect: A Philosophy of Life-Driven System Design"},{"content":" This article was partially machine translated\nI started Bookkeeping in April 2023. I stopped in April 2025.\nMy last entry: ¥0\nThe Beginning: To Save Money and Gain Control It all started very simply — I wanted to control my spending and build better financial awareness. And in the beginning, it really worked. I successfully curbed some of my bad spending habits.\nThe Process: Stepping Into the World of Optimization and Card Collecting Gradually, in pursuit of “better” consumption, I started comparing everything, looking for the optimal choice. At first, it was just comparing product prices. Later, it expanded to payment methods, tools, and eventually to bank promotions and card applications.\nI applied for cards for discounts, then for convenience, and eventually just for collecting them. Step by step, I had fallen deep into the card-collecting world.\nWhat started as saving money, turned into convenience, and ended up becoming card collecting.\nThe Backfire: When Accounting Became a Burden And so, accounting itself slowly became a burden. More and more accounts, more and more complex scenarios — the time cost and mental cost of bookkeeping had long exceeded its actual benefits.\nThere were times I spent hours researching just to save a few bucks. At first, that felt fun. But after doing it over and over, finding the optimal solution no longer excited me — it just left me feeling empty.\nThe Change: From Seeking The Best to Seeking Comfort Maybe I’ve changed. My approach to consumption has changed too.\nFrom “maximize savings” to “close enough, as long as I’m comfortable.”\nI realized I had already broken through my original spending limits, yet I didn’t lose control. On the contrary, I came to understand more deeply: compared to saving money, my time and my happiness mattered more.\nThe Reflection: Why Am I Even Keeping Accounts? Because of bookkeeping, I started to:\nConstantly dig through records because I had too many accounts Create new accounts in the app frequently due to currency conversions Spend a long time hesitating over whether I should buy something Have my mood ruined during outings with friends over spending details That made me reflect — Why am I even doing this?\nIs it really worth it for the so-called “gains” from bookkeeping?\nThe Decision: Letting Go, Reset, Move On So I tried to let go, to not fuss over the details, and simply asked myself:\n“Am I happy?”\nAnd the result was — yes, I was really happy. And my spending wasn’t as high as I imagined either.\nPerhaps my habits had already trained me to naturally compare prices. Or maybe, emotional value is something that can never be measured by discounts.\nTherefore, I think it’s time to let go.\nAccounting has fulfilled its mission.\nIt’s no longer a tool, but a shackle.\nHabits are meant to improve life.\nIf they can no longer be sustained by passion, and instead get in the way of living, then it’s time to learn to say goodbye.\nThe Ending: Thank You, and Keep Living Giving up a habit I’ve maintained for two years is indeed a little bittersweet.\nBut maybe this is also a part of life. Nothing stays with us forever, but as long as the time spent together was beautiful, that’s enough.\nPerhaps I’ve lost a symbolic tool that made me feel like “I’m good at saving money.”\nBut more than that, I hope my future self won’t rely on numbers and records for a sense of security, but instead, live with true ease and freedom.\nFrom being in control, to flowing into the unknown.\nI hope I can adapt soon.\nAnd I hope I can spend the saved time on things that are more meaningful and more joyful.\nThe Last Entry, ¥0 Leaving a short note here.\nThank you to myself for two years of dedicated tracking.\nFrom now on, I hope to spend the saved time on things that are more meaningful and joyful.\nAnd just like that, I archived this experience.\nRecording ends, but life is only just beginning.\n","date":"2025-04-14T16:23:48+09:00","permalink":"https://blog.yexca.net/en/archives/244/","title":"From Saving Money, To Living Life, To Saying Goodbye"},{"content":" This article was partially machine translated\nIntroduction Is there a a way to study language listening without feeling like you\u0026rsquo;re studying, sometimes you can listen to repeatedly and try shadowing? Isn\u0026rsquo;t that music!\nI thought about that I only understand part of songs I listen to. If I analyze and understand the lyrics more deeply, maybe I can really treat it as language practice.\nI\u0026rsquo;ll start with the first song, which, although a little heavy, has accompanied me for most of my time. It\u0026rsquo;s a song I can listen to over and over again without getting tired of it.\nMusic Video Lyrics 僕が死のうと思ったのは　ウミネコが桟橋で鳴いたから\n桟橋: さんばし\nI thought of ending my life because a black-tailed gull cried on the pier\n波の随意に浮かんで消える　過去も啄ばんで飛んでいけ\n啄ばむ: ついばむ\nDrifting at the whim of the waves, disappearing and carrying away the past as they fly\n僕が死のうと思ったのは　誕生日に杏の花が咲いたから\n杏: あんず\nI thought of ending my life because the apricot blossoms bloomed on my birthday\nその木漏れ日でうたた寝したら　虫の死骸と土になれるかな\n木漏れ日: こもれび　死骸: しがい　土: つち\nIf I take a nap under the sunlight filtering through the trees, will I become a corpse and return to the soil?\n薄荷飴　漁港の灯台　錆びたアーチ橋　捨てた自転車\n薄荷: はっか　漁港: ぎょこう　灯台: とうだい　錆びる: さびる\nMint candy, the lighthouse at the fishing port, a rusty arch bridge, and an abandoned bicycle\n木造の駅のストーブの前で　どこにも旅立てない心\n旅立つ: たびだつ\nIn front of the stove at the wooden station, a heart unable to set out anywhere\n今日はまるで昨日みたいだ　明日を変えるなら今日を変えなきゃ\nToday feels just like yesterday. If you want to change tomorrow, you have to change today\n分かってる　分かってる　けれど\nI know, I understand, but\u0026hellip;\n僕が死のうと思ったのは　心が空っぽになったから\nI thought of ending my life because my heart felt completely empty\n満たされないと泣いているのは　きっと満たされたいと願うから\nCrying over emptiness, because deep down, you wish to be fulfilled\n僕が死のうと思ったのは　靴紐が解けたから\n靴紐: くつひも　解ける: ほどける\nI thought of ending my life because my shoelace came undone\n結びなおすのは苦手なんだよ　人との繋がりもまた然り\n然り: しかり\nI\u0026rsquo;m not good at tying them again, and the same goes for building connections with others\n僕が死のうと思ったのは　少年が僕を見つめていたから\nI thought of ending my life because a boy was staring at me\nベッドの上で土下座してるよ　あの日の僕にごめんなさいと\nHe\u0026rsquo;s prostrating on the bed, apologizing to me from that day\nパソコンの薄明かり　上階の部屋の生活音\n薄上がり: うすあがり\nThe faint light from the computer, the sounds of life from the room upstairs\nインターフォンのチャイムの音　耳を塞ぐ鳥かごの少年\n鳥かご: とりかご\nThe sound of the intercom chime, the boy in the bridcage covering his ears\n見えない敵と戦ってる　六畳一間のドンキホーテ\n一間: ひとま\nFighting with an invisible enemy, in a six-tatami mat room, a Don Quixote\nゴールはどうせ醜いものさ\n醜い: みにくい\nThe goal is inevitably an ugly thing\n僕が死のうと思ったのは　冷たい人と言われたから\nI thought of ending my life because I was called a cold person\n愛されたいと泣いているのは　人の温もりを知ってしまったから\n温もり: ぬくもり\nCrying because I want to be loved, as I\u0026rsquo;ve already known the warmth of others\n僕が死のうと思ったのは　あなたが奇麗に笑うから\nI thought of ending my life because you smile so beautifully\n死ぬことばかり考えてしまうのは　きっと生きる事に真面目すぎるから\nThe reason I keep thinking about dying is probably I take life too seriously\n僕が死のうと思ったのは　まだあなたに出会ってなかったから\nI thought of ending my life because I hadn\u0026rsquo;t met you yet\nあなたのような人が生まれた　世界を少し好きになったよ\nBecause of people like you being born, I started to like this world a little\nあなたのような人が生きてる　世界に少し期待するよ\nBecause of people like you living, I started to look forward to this world a little\n","date":"2025-01-11T01:10:51+09:00","permalink":"https://blog.yexca.net/en/archives/214/","title":"Echoes of Emotion - 《僕が死のうと思ったのは》"},{"content":" This article was partially machine translated\nIntroduction Today, I want to summarize the things I recently designed, such as semi-transparent elements, frosted glass effects and rounded corners. But then It occurred to me that I created a webpage on December 1, 2023, so I decided to rebuild it by the way.\nwebpage background A modern (anime style) website needs a background image.\n1 2 3 4 5 6 7 8 body{ background-image: url(\u0026#39;../img/77194247_p0.jpg\u0026#39;); background-size: cover; background-attachment: fixed; /* fixed image */ background-repeat: no-repeat; /* no repeat image */ padding: 0; margin: 0; } Semi-transparent and Frosted Glass effects Then apply a mask to the background in order to achieve the semi-transparent and frosted glass effects.\n1 2 3 4 5 6 7 8 9 10 11 .layout { /* display: flex; */ margin: 0; padding: 0; display: flex; width: 100vw; height: 100vh; backdrop-filter: blur(2px); /* background blur effect */ -webkit-backdrop-filter: blur(2px); /* Safari support */ background: rgba(0, 0, 0, 0.4); /* semi-transparent black background */ } Webpage Rebuild By the way, writing articles is troublesome. When I am programming, it distracts me, and I am too tried to write them after I finish programming, so I am just writing articles casually now.\nRepository: https://github.com/yexca/MusicPlayer-Twinkle I updated the previous article (Simplified Chinese) https://blog.yexca.net/archives/116/ and created an example using that method: https://twinkle.yexca.net Card Effect This is modern design too.\n1 2 3 4 5 6 7 8 9 10 .card { width: 300px; padding: 20px; background-color: rgba(255, 255, 255, 0.5); /* semi-transparent white background */ border-radius: 15px; /* rounded corners */ box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* shadow effect */ backdrop-filter: blur(10px); /* background blur effect */ border: 1px solid rgba(255, 255, 255, 0.3); /* border */ color: pink; /* color of text */ } Well, I might complete this project if I have free time\u0026hellip; (Digging a new hole, again)\nTwinkle The content of the project is Twinkle\u0026rsquo;s music, if you\u0026rsquo;d like to learn more, check it out here:\nhttps://twinkle130527.wixsite.com/twinkle https://www.dojin-music.info/circle/1255 SoundCloud\nhttps://soundcloud.com/twintwinkles ","date":"2025-01-05T16:19:36+09:00","permalink":"https://blog.yexca.net/en/archives/212/","title":"Glassmorphism"},{"content":"introduction Graduation thesis is really torture. When was this article written? The file was created on 2023.11.30 and modified on 2022.09.18. I don’t understand it, but I am shocked.\nCode 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;script\u0026gt; function secondToDate(second) { if (!second) { return 0; } var time = new Array(0, 0, 0, 0, 0); if (second \u0026gt;= 365 * 24 * 3600) { time[0] = parseInt(second / (365 * 24 * 3600)); second %= 365 * 24 * 3600; } if (second \u0026gt;= 24 * 3600) { time[1] = parseInt(second / (24 * 3600)); second %= 24 * 3600; } if (second \u0026gt;= 3600) { time[2] = parseInt(second / 3600); second %= 3600; } if (second \u0026gt;= 60) { time[3] = parseInt(second / 60); second %= 60; } if (second \u0026gt; 0) { time[4] = second; } return time; }\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; language=\u0026#34;javascript\u0026#34;\u0026gt; function setTime() { var create_time = Math.round(new Date(Date.UTC(2021, 11, 06, 14, 15, 19)).getTime() / 1000); var timestamp = Math.round((new Date().getTime() + 8 * 60 * 60 * 1000) / 1000); currentTime = secondToDate((timestamp - create_time)); currentTimeHtml = \u0026#39;This Blog has running: \u0026lt;br/\u0026gt;\u0026#39; + currentTime[0] + \u0026#39; y \u0026#39; + currentTime[1] + \u0026#39; d \u0026#39; + currentTime[2] + \u0026#39; h \u0026#39; + currentTime[3] + \u0026#39; m \u0026#39; + currentTime[4] + \u0026#39; s\u0026#39;; document.getElementById(\u0026#34;htmer_time\u0026#34;).innerHTML = currentTimeHtml; } setInterval(setTime, 1000); \u0026lt;/script\u0026gt; quote Add it where you want\n1 \u0026lt;span id=\u0026#34;htmer_time\u0026#34; style=\u0026#34;color: pink;\u0026#34; /\u0026gt; References 个人博客添加运行时间 - 腾讯云开发者社区-腾讯云 ","date":"2024-05-14T11:08:25+08:00","permalink":"https://blog.yexca.net/en/archives/172/","title":"Blog running time"},{"content":" 📢 This article was translated by ChatGPT Introduction After playing VR games like Beat Saber and VRChat, I suddenly remembered that some Illusion games support VR. Since Koikatu is my favorite, I decided to give it a try. However, I encountered several issues, so I’m documenting them here. Note: the VR version has no story mode, and I used the vanilla version of the game, so there were fewer problems overall.\nPrerequisites / Conditions Some of the following images and text are from the official Oculus Support page . I translated some parts myself, but since my English isn\u0026rsquo;t great, please refer to the official content for accuracy. For full details, see Oculus Link compatibility requirements .\nCable Requirements Oculus Link requires a high-quality USB cable that supports both data and power. For comfort and usability, the cable should be at least 3 meters (10 feet) long.\nPC Requirements Component Recommended Specs CPU Intel i5-4590 / AMD Ryzen 5 1500X or better GPU See table below RAM 8 GB or more OS Windows 10 USB Port At least one USB port Supported GPUs for Oculus Link Supported Not Supported NVIDIA GPUs NVIDIA Titan Z X NVIDIA Titan X X NVIDIA GTX 970 X GTX 1060 (Desktop, 3GB) X GTX 1060 (Desktop, 6GB) X GTX 1060M X GTX 1070 (all) X GTX 1080 (all) X GTX 1650 X GTX 1650 Super X GTX 1660 X GTX 1660 Ti X RTX 20-series (all) X RTX 30-series (all) X Supported Not Supported AMD GPUs AMD 200 Series X AMD 300 Series X AMD 400 Series X AMD 500 Series X AMD 5000 Series X AMD 6000 Series X AMD Vega Series X 1. Launching the Game To launch the VR version, simply open KoikatuVR.exe. Since this uses Steam streaming, you should start SteamVR beforehand.\nBefore playing, make sure to wear your headphones and lock your door to avoid\u0026hellip; unexpected situations. If you can’t, then just play responsibly (doge).\nProblem 1: Can’t Enter SteamVR Step 1: Ensure All Required Software Is Installed 1) Install SteamVR Open Steam, press Win+R, enter steam://run/250820, and hit enter. This will trigger the installation of SteamVR.\n2) Install Oculus Software Go to the Oculus setup page . After installation, additional files will be downloaded, and you’ll be prompted to log in. Make sure your network is working properly.\nIf asked for a payment method, look for a “Skip” button.\nStuck on Loading at Login? You can fix this by modifying your hosts file. I recommend using Huorong (a Chinese antivirus tool) to edit it safely.\nIf you don’t use Huorong, go to C:\\Windows\\System32\\drivers\\etc, find the file named hosts, and open it with Notepad.\nAdd the following lines at the end:\n1 2 3 4 5 157.240.11.49 graph.oculus.com 157.240.11.49 www2.oculus.com 157.240.8.49 scontent.oculuscdn.com 157.240.8.49 securecdn.oculus.com Save the file. If you\u0026rsquo;re not using Huorong, save it elsewhere first and move it back, removing any .txt extension.\nStep 2: Check the Link Cable The Oculus app will prompt you to test the Link cable during setup. If you skipped it, go to Devices \u0026gt; Quest2 and Touch - USB Test to test again.\nStep 3: Check Settings 1) Quest2 Device Settings When you connect your Quest2 via USB, it will ask if you want to allow data access. Select “Deny.” If you allowed it by mistake, unplug and reconnect, then choose “Deny.”\n2) Oculus Software Settings SteamVR will prompt you to allow “unknown sources.” Click “Allow.”\nAlternatively, go to Settings \u0026gt; General \u0026gt; Unknown Sources in the Oculus software.\nStep 4: Still Not Working? Try This Sequence 1) Quest2 Device After connecting to your PC, you should see a popup asking to “Enable Oculus Link.” Click “Enable.”\nIf no popup appears, go to the Quick Settings panel on the bottom left and click “Oculus Link.”\n2) Start SteamVR Surely you know how to launch SteamVR\u0026hellip; right? (doge)\nIf your VR device is connected before starting Steam, the top-right corner of Steam should show a “VR” button. Click it to start.\nIf not, right-click the Steam icon in your system tray and select the second-last option — that’s SteamVR.\nOr enable the \u0026ldquo;Tools\u0026rdquo; view in your Steam library to find SteamVR listed there.\n2. Starting the Game I don’t really know what to write here — this section exists just to make Problem 2 game-related (doge).\nLaunching KoikatuVR.exe will auto-start SteamVR. So you can open KoikatuVR after launching Oculus Link on your Quest2.\nNote: The game also opens a window on your desktop. You can press Win+D to minimize all windows. But when you take off and put your headset back on, the window may reappear. Just a heads-up.\nProblem 2: Can’t Start the Game / Don’t Know How You might’ve read elsewhere or seen videos saying only certain devices are supported (I forgot which).\nIf you also tested “VR Kanojo” and assumed it uses eye tracking to select — that’s incorrect (I thought so too lol).\nJust press the joystick to bring up a selection line, then use the front trigger to confirm.\n(See 3. Controls for more input info.)\nProblem 3: White Screen After Starting / Stuck on Loading Go to the Koikatu DL page and scroll down to download the コイカツ VR パッチ.\nDirect link: VR Patch Download Unzip the file and run the executable. It’ll create a コイカツ！VR_0531 folder. Copy the contents of the setup folder into your game directory and overwrite when prompted.\nNote: According to the original author, this patch may limit positions to only three. I didn’t verify it myself since I didn’t play far. I initially wanted to play the story in VR, but that’s not supported. Here’s their (edited) fix:\nYou need to use the positions in Story Mode first, then they become available in VR. So just go through all positions during battles, then save at night, exit, switch to VR, and they’ll be available.\nSource (Chinese): Anyone Tried the VR Version? 3. Controls These are based on personal gameplay and only cover the basics. For full controls, consult other guides.\n1) Starting the Game You’ll see two options after launch:\nスタート = Start エンド = End Press the joystick to show a selection line, and confirm with the front trigger.\n2) In-Game Interface Text will appear near your wrist. Use the Y and B buttons to switch tabs.\nThere are two tabs normally and a third (Move) during combat:\nJapanese English Description Function アクション Action Actions Front trigger to act, side trigger for menu, joystick to select システム System System Settings Front trigger to reset position 移動 Move Movement Hold front trigger to rotate view 3) Notes You can only use the joystick to select options while on the “アクション” (Action) tab.\nReferences Oculus Link Official Anyone Tried the VR Version? (Chinese) Fix Oculus Client Login/Install Issues on Win10 (CSDN, Chinese) “China Mobile” in Japanese (Don’t ask why this is here. I don’t speak Japanese lol) ","date":"2022-03-18T16:54:23+08:00","permalink":"https://blog.yexca.net/en/archives/30/","title":"Issues and Solutions When Playing Koikatsu in VR with Quest 2"},{"content":"Welcome to WordPress. This is your first post. Edit or delete it and start writing.\n","date":"2021-11-06T14:15:19+08:00","permalink":"https://blog.yexca.net/en/archives/1/","title":"Hello World！"}]